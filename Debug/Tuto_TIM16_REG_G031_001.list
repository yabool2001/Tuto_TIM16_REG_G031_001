
Tuto_TIM16_REG_G031_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c0  080005c8  000105c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c0  080005c0  000105c8  2**0
                  CONTENTS
  4 .ARM          00000000  080005c0  080005c0  000105c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c0  080005c8  000105c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005c8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000105c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bab  00000000  00000000  00010633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d9  00000000  00000000  000111de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  000114b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  00011560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c394  00000000  00000000  000115d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ccc  00000000  00000000  0001d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044b8f  00000000  00000000  0001e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000194  00000000  00000000  000631c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00063354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080005a8 	.word	0x080005a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080005a8 	.word	0x080005a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
uint8_t my_tim16_irq = 0 ;
uint16_t tim16_arr = 0 ;
void ldg_init ( void ) ;

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	ldg_init () ;
 8000224:	f000 f820 	bl	8000268 <ldg_init>
	config_my_tim16 ( G031_MY_TIMCLOCK ) ;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x3c>)
 800022a:	0018      	movs	r0, r3
 800022c:	f000 f91a 	bl	8000464 <config_my_tim16>
	start_my_tim16 ( (uint16_t) 10000 ) ;
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <main+0x40>)
 8000232:	0018      	movs	r0, r3
 8000234:	f000 f94e 	bl	80004d4 <start_my_tim16>
	while ( my_tim16_irq == 0 )
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <main+0x44>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0fb      	beq.n	800023a <main+0x1a>
		;
	off_my_tim16 () ;
 8000242:	f000 f97b 	bl	800053c <off_my_tim16>
	config_my_tim16 ( G031_MY_TIMCLOCK ) ;
 8000246:	4b05      	ldr	r3, [pc, #20]	; (800025c <main+0x3c>)
 8000248:	0018      	movs	r0, r3
 800024a:	f000 f90b 	bl	8000464 <config_my_tim16>
	start_my_tim16 ( (uint16_t) 1000 ) ;
 800024e:	23fa      	movs	r3, #250	; 0xfa
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f93e 	bl	80004d4 <start_my_tim16>
	while  ( 1 )
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	00f42400 	.word	0x00f42400
 8000260:	00002710 	.word	0x00002710
 8000264:	2000001c 	.word	0x2000001c

08000268 <ldg_init>:
		;
}

void ldg_init ( void ) // LDG = PC6
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|=  RCC_IOPENR_GPIOCEN ;
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <ldg_init+0x54>)
 800026e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <ldg_init+0x54>)
 8000272:	2104      	movs	r1, #4
 8000274:	430a      	orrs	r2, r1
 8000276:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOC->MODER 	|= 	GPIO_MODER_MODE6_0 ;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <ldg_init+0x58>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <ldg_init+0x58>)
 800027e:	2180      	movs	r1, #128	; 0x80
 8000280:	0149      	lsls	r1, r1, #5
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
	GPIOC->MODER 	&= 	~GPIO_MODER_MODE6_1 ;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <ldg_init+0x58>)
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <ldg_init+0x58>)
 800028c:	490d      	ldr	r1, [pc, #52]	; (80002c4 <ldg_init+0x5c>)
 800028e:	400a      	ands	r2, r1
 8000290:	601a      	str	r2, [r3, #0]
	GPIOC->OTYPER 	&= 	~GPIO_OTYPER_OT6 ;
 8000292:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <ldg_init+0x58>)
 8000294:	685a      	ldr	r2, [r3, #4]
 8000296:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <ldg_init+0x58>)
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	438a      	bics	r2, r1
 800029c:	605a      	str	r2, [r3, #4]
	GPIOC->OSPEEDR 	&= 	~GPIO_OSPEEDR_OSPEED6 ;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <ldg_init+0x58>)
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <ldg_init+0x58>)
 80002a4:	4908      	ldr	r1, [pc, #32]	; (80002c8 <ldg_init+0x60>)
 80002a6:	400a      	ands	r2, r1
 80002a8:	609a      	str	r2, [r3, #8]
	GPIOC->PUPDR 	&= 	~GPIO_PUPDR_PUPD6 ;
 80002aa:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <ldg_init+0x58>)
 80002ac:	68da      	ldr	r2, [r3, #12]
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <ldg_init+0x58>)
 80002b0:	4905      	ldr	r1, [pc, #20]	; (80002c8 <ldg_init+0x60>)
 80002b2:	400a      	ands	r2, r1
 80002b4:	60da      	str	r2, [r3, #12]
}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40021000 	.word	0x40021000
 80002c0:	50000800 	.word	0x50000800
 80002c4:	ffffdfff 	.word	0xffffdfff
 80002c8:	ffffcfff 	.word	0xffffcfff

080002cc <TIM16_IRQHandler>:
	TIM16->SR &= ~TIM_SR_UIF ;		// Clear IRQ flag
	TIM16->SR &= ~TIM_SR_CC1IF ; 	// CC1IF: Capture/Compare 1 interrupt flag
}

void TIM16_IRQHandler ( void )
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	TOGGLE_LDG ;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <TIM16_IRQHandler+0x28>)
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <TIM16_IRQHandler+0x28>)
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	404a      	eors	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
	my_tim16_irq = 1 ;
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <TIM16_IRQHandler+0x2c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
	TIM16->SR &= ~TIM_SR_UIF ;		//Clean UIF Flag
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <TIM16_IRQHandler+0x30>)
 80002e4:	691a      	ldr	r2, [r3, #16]
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <TIM16_IRQHandler+0x30>)
 80002e8:	2101      	movs	r1, #1
 80002ea:	438a      	bics	r2, r1
 80002ec:	611a      	str	r2, [r3, #16]
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	50000800 	.word	0x50000800
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40014400 	.word	0x40014400

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	e000      	b.n	8000308 <Reset_Handler+0x8>
 8000306:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 f917 	bl	8000560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff75 	bl	8000220 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	080005c8 	.word	0x080005c8
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	20000020 	.word	0x20000020

08000350 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_COMP_IRQHandler>
	...

08000354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	0002      	movs	r2, r0
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000360:	1dfb      	adds	r3, r7, #7
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b7f      	cmp	r3, #127	; 0x7f
 8000366:	d809      	bhi.n	800037c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000368:	1dfb      	adds	r3, r7, #7
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	001a      	movs	r2, r3
 800036e:	231f      	movs	r3, #31
 8000370:	401a      	ands	r2, r3
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <__NVIC_EnableIRQ+0x30>)
 8000374:	2101      	movs	r1, #1
 8000376:	4091      	lsls	r1, r2
 8000378:	000a      	movs	r2, r1
 800037a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	e000e100 	.word	0xe000e100

08000388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000388:	b590      	push	{r4, r7, lr}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	0002      	movs	r2, r0
 8000390:	6039      	str	r1, [r7, #0]
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b7f      	cmp	r3, #127	; 0x7f
 800039c:	d828      	bhi.n	80003f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800039e:	4a2f      	ldr	r2, [pc, #188]	; (800045c <__NVIC_SetPriority+0xd4>)
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	089b      	lsrs	r3, r3, #2
 80003a8:	33c0      	adds	r3, #192	; 0xc0
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	589b      	ldr	r3, [r3, r2]
 80003ae:	1dfa      	adds	r2, r7, #7
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	0011      	movs	r1, r2
 80003b4:	2203      	movs	r2, #3
 80003b6:	400a      	ands	r2, r1
 80003b8:	00d2      	lsls	r2, r2, #3
 80003ba:	21ff      	movs	r1, #255	; 0xff
 80003bc:	4091      	lsls	r1, r2
 80003be:	000a      	movs	r2, r1
 80003c0:	43d2      	mvns	r2, r2
 80003c2:	401a      	ands	r2, r3
 80003c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	019b      	lsls	r3, r3, #6
 80003ca:	22ff      	movs	r2, #255	; 0xff
 80003cc:	401a      	ands	r2, r3
 80003ce:	1dfb      	adds	r3, r7, #7
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	0018      	movs	r0, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	4003      	ands	r3, r0
 80003d8:	00db      	lsls	r3, r3, #3
 80003da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003dc:	481f      	ldr	r0, [pc, #124]	; (800045c <__NVIC_SetPriority+0xd4>)
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b25b      	sxtb	r3, r3
 80003e4:	089b      	lsrs	r3, r3, #2
 80003e6:	430a      	orrs	r2, r1
 80003e8:	33c0      	adds	r3, #192	; 0xc0
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003ee:	e031      	b.n	8000454 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003f0:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <__NVIC_SetPriority+0xd8>)
 80003f2:	1dfb      	adds	r3, r7, #7
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	0019      	movs	r1, r3
 80003f8:	230f      	movs	r3, #15
 80003fa:	400b      	ands	r3, r1
 80003fc:	3b08      	subs	r3, #8
 80003fe:	089b      	lsrs	r3, r3, #2
 8000400:	3306      	adds	r3, #6
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	18d3      	adds	r3, r2, r3
 8000406:	3304      	adds	r3, #4
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1dfa      	adds	r2, r7, #7
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	0011      	movs	r1, r2
 8000410:	2203      	movs	r2, #3
 8000412:	400a      	ands	r2, r1
 8000414:	00d2      	lsls	r2, r2, #3
 8000416:	21ff      	movs	r1, #255	; 0xff
 8000418:	4091      	lsls	r1, r2
 800041a:	000a      	movs	r2, r1
 800041c:	43d2      	mvns	r2, r2
 800041e:	401a      	ands	r2, r3
 8000420:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	019b      	lsls	r3, r3, #6
 8000426:	22ff      	movs	r2, #255	; 0xff
 8000428:	401a      	ands	r2, r3
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	0018      	movs	r0, r3
 8000430:	2303      	movs	r3, #3
 8000432:	4003      	ands	r3, r0
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000438:	4809      	ldr	r0, [pc, #36]	; (8000460 <__NVIC_SetPriority+0xd8>)
 800043a:	1dfb      	adds	r3, r7, #7
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	001c      	movs	r4, r3
 8000440:	230f      	movs	r3, #15
 8000442:	4023      	ands	r3, r4
 8000444:	3b08      	subs	r3, #8
 8000446:	089b      	lsrs	r3, r3, #2
 8000448:	430a      	orrs	r2, r1
 800044a:	3306      	adds	r3, #6
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	18c3      	adds	r3, r0, r3
 8000450:	3304      	adds	r3, #4
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b003      	add	sp, #12
 800045a:	bd90      	pop	{r4, r7, pc}
 800045c:	e000e100 	.word	0xe000e100
 8000460:	e000ed00 	.word	0xe000ed00

08000464 <config_my_tim16>:

#include "stm32g031xx.h"
#include "my_tims.h"

void config_my_tim16 ( uint32_t my_tim_clock )
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	RCC->APBENR2		|= RCC_APBENR2_TIM16EN ; 	// Enable TIM16 clock
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <config_my_tim16+0x68>)
 800046e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000470:	4b16      	ldr	r3, [pc, #88]	; (80004cc <config_my_tim16+0x68>)
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	0289      	lsls	r1, r1, #10
 8000476:	430a      	orrs	r2, r1
 8000478:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->PSC 			= (uint16_t) ( ( my_tim_clock / 1000 ) - 1 ) ; // default: 0,001 s = 1000 Hz = ( 16 000 000 Hz / 16 000 )
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	22fa      	movs	r2, #250	; 0xfa
 800047e:	0091      	lsls	r1, r2, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f7ff fe41 	bl	8000108 <__udivsi3>
 8000486:	0003      	movs	r3, r0
 8000488:	b29b      	uxth	r3, r3
 800048a:	3b01      	subs	r3, #1
 800048c:	b29a      	uxth	r2, r3
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <config_my_tim16+0x6c>)
 8000490:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->EGR			|= TIM_EGR_UG ; 			// Force EGR.UG update
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <config_my_tim16+0x6c>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <config_my_tim16+0x6c>)
 8000498:	2101      	movs	r1, #1
 800049a:	430a      	orrs	r2, r1
 800049c:	615a      	str	r2, [r3, #20]
	TIM16->SR 			&= ~TIM_SR_UIF ;			//Clean UIF Flag
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <config_my_tim16+0x6c>)
 80004a0:	691a      	ldr	r2, [r3, #16]
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <config_my_tim16+0x6c>)
 80004a4:	2101      	movs	r1, #1
 80004a6:	438a      	bics	r2, r1
 80004a8:	611a      	str	r2, [r3, #16]
	TIM16->DIER 		|= TIM_DIER_UIE ; 			// Enable interrupt generation
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <config_my_tim16+0x6c>)
 80004ac:	68da      	ldr	r2, [r3, #12]
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <config_my_tim16+0x6c>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority 	( TIM16_IRQn , 0 ) ;		// Configure interrupt priority
 80004b6:	2100      	movs	r1, #0
 80004b8:	2015      	movs	r0, #21
 80004ba:	f7ff ff65 	bl	8000388 <__NVIC_SetPriority>
	NVIC_EnableIRQ 		( TIM16_IRQn ) ;			// Enable interrupt
 80004be:	2015      	movs	r0, #21
 80004c0:	f7ff ff48 	bl	8000354 <__NVIC_EnableIRQ>
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b002      	add	sp, #8
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40014400 	.word	0x40014400

080004d4 <start_my_tim16>:

void start_my_tim16 ( uint16_t my_tim16_arr )
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	0002      	movs	r2, r0
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	801a      	strh	r2, [r3, #0]
	RCC->APBENR2	|= RCC_APBENR2_TIM16EN ; 	// Enable TIM16 clock
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <start_my_tim16+0x38>)
 80004e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <start_my_tim16+0x38>)
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	0289      	lsls	r1, r1, #10
 80004ea:	430a      	orrs	r2, r1
 80004ec:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->ARR 		=  my_tim16_arr - 1 ;	// default: 2 s = 2000 * 0,001s
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <start_my_tim16+0x3c>)
 80004f6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->CR1 		|= TIM_CR1_CEN ;		// Start counting TIM16
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <start_my_tim16+0x3c>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <start_my_tim16+0x3c>)
 80004fe:	2101      	movs	r1, #1
 8000500:	430a      	orrs	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	b002      	add	sp, #8
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40014400 	.word	0x40014400

08000514 <stop_my_tim16>:

void stop_my_tim16 ()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	TIM16->SR 	&= ~TIM_SR_UIF ;		//Clean UIF Flag
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <stop_my_tim16+0x24>)
 800051a:	691a      	ldr	r2, [r3, #16]
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <stop_my_tim16+0x24>)
 800051e:	2101      	movs	r1, #1
 8000520:	438a      	bics	r2, r1
 8000522:	611a      	str	r2, [r3, #16]
	TIM16->CR1 	&= ~TIM_CR1_CEN ;		// Stop counting TIM16
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <stop_my_tim16+0x24>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <stop_my_tim16+0x24>)
 800052a:	2101      	movs	r1, #1
 800052c:	438a      	bics	r2, r1
 800052e:	601a      	str	r2, [r3, #0]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	40014400 	.word	0x40014400

0800053c <off_my_tim16>:

void off_my_tim16 () // Save energy and Disable TIM16 clock
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	stop_my_tim16 () ;
 8000540:	f7ff ffe8 	bl	8000514 <stop_my_tim16>
	RCC->APBENR2 	&= ~RCC_APBENR2_TIM16EN ; 	// Save energy: disable TIM16 clock
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <off_my_tim16+0x1c>)
 8000546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <off_my_tim16+0x1c>)
 800054a:	4904      	ldr	r1, [pc, #16]	; (800055c <off_my_tim16+0x20>)
 800054c:	400a      	ands	r2, r1
 800054e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000
 800055c:	fffdffff 	.word	0xfffdffff

08000560 <__libc_init_array>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	2600      	movs	r6, #0
 8000564:	4c0c      	ldr	r4, [pc, #48]	; (8000598 <__libc_init_array+0x38>)
 8000566:	4d0d      	ldr	r5, [pc, #52]	; (800059c <__libc_init_array+0x3c>)
 8000568:	1b64      	subs	r4, r4, r5
 800056a:	10a4      	asrs	r4, r4, #2
 800056c:	42a6      	cmp	r6, r4
 800056e:	d109      	bne.n	8000584 <__libc_init_array+0x24>
 8000570:	2600      	movs	r6, #0
 8000572:	f000 f819 	bl	80005a8 <_init>
 8000576:	4c0a      	ldr	r4, [pc, #40]	; (80005a0 <__libc_init_array+0x40>)
 8000578:	4d0a      	ldr	r5, [pc, #40]	; (80005a4 <__libc_init_array+0x44>)
 800057a:	1b64      	subs	r4, r4, r5
 800057c:	10a4      	asrs	r4, r4, #2
 800057e:	42a6      	cmp	r6, r4
 8000580:	d105      	bne.n	800058e <__libc_init_array+0x2e>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	00b3      	lsls	r3, r6, #2
 8000586:	58eb      	ldr	r3, [r5, r3]
 8000588:	4798      	blx	r3
 800058a:	3601      	adds	r6, #1
 800058c:	e7ee      	b.n	800056c <__libc_init_array+0xc>
 800058e:	00b3      	lsls	r3, r6, #2
 8000590:	58eb      	ldr	r3, [r5, r3]
 8000592:	4798      	blx	r3
 8000594:	3601      	adds	r6, #1
 8000596:	e7f2      	b.n	800057e <__libc_init_array+0x1e>
 8000598:	080005c0 	.word	0x080005c0
 800059c:	080005c0 	.word	0x080005c0
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c0 	.word	0x080005c0

080005a8 <_init>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ae:	bc08      	pop	{r3}
 80005b0:	469e      	mov	lr, r3
 80005b2:	4770      	bx	lr

080005b4 <_fini>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr
